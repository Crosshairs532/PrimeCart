// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id String @id @default(uuid())
  email String @unique()
  name String 
  role userRole?
  password String
  status userStatus?
  profilePhoto String? 
  Admin Admin?
  customer Customer?
  Vendor Vendor?
  Follows Follow[]
  Orders Order[]
  @@map("users")
 
}

model Admin {
  id String @id @default(uuid())
  email String @unique()
  Blacklist Blacklist[]
  user User @relation(fields: [email], references: [email], onDelete: Cascade)
}
model Customer {
  id String @id @default(uuid())
  email String @unique()
  RecentProduct RecentProduct[]
  product_reviews product_review[]
  user User @relation(fields: [email], references: [email], onDelete: Cascade)
}
model Vendor {
  id String @id @default(uuid())
  email String @unique()
  Shop Shop?
  Blacklist Blacklist? // one vendor  - one shop - one blacklist 
  user User @relation(fields: [email], references: [email], onDelete: Cascade)
}

//* Product 

model Product {
  id String @id @default(uuid())
  name String 
  price Int
  description String 
  inventory_count Int 
  discount Int
  shopId String
  images String[]
  product_review product_review[]
  Order Order[]
  RecentProduct RecentProduct[] 
  category Category[] @relation("ProductCategory")
  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade) // delete product from both shop and product table
  @@map("products")
}
model Category {
  id String @id @default(uuid())
  categoryName String 
  product Product[] @relation("ProductCategory")
  @@map("categories")

}


model product_review {
  id String @id @default(uuid())
  rating Float?
  review String? //comment 
  productId String 
  product Product @relation(fields: [productId] , references: [id])
  customerId String 
  customer Customer @relation(fields: [customerId], references: [id])
  createdAt DateTime @default(now())

  @@map("product_reviews")
}

model RecentProduct {
  id String @id @default(uuid())
  userId String
  productId String
  user Customer @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

//*  vendor - shop 

model Shop {
    id String @id @default(uuid())
    logo String 
    name String 
    vendorId String @unique()
    description String // shop description
    products Product[]
    followers Follow[]
    Blacklist Blacklist?
    vendor Vendor @relation(fields: [vendorId], references: [id])
    Order Order[]
}

model Follow {
  id String @id @default(uuid())
  userId String
  shopId String
  user User @relation(fields: [userId], references: [id])
  shop Shop @relation(fields: [shopId], references: [id])

  @@map("follow_shop")
}

// order table 

model Order { 
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id])
  shopId String
  shop Shop @relation(fields: [shopId], references: [id])
  userId String 
  user User @relation(fields: [userId], references: [id])
  @@map("orders")

}

// Blacklist
model Blacklist {
  id String @id @default(uuid())
  vendorId String @unique()
  adminId String
  shopId String  @unique()
  shop Shop @relation(fields: [shopId], references: [id])
  admin Admin @relation(fields: [adminId], references: [id])
  vendor Vendor @relation(fields: [vendorId], references: [id])
  @@map("blacklists")
}


// enums
enum userRole {
  ADMIN
  CUSTOMER
  VENDOR
}
enum userStatus {
  DELETE
  SUSPEND
  ACTIVE
}



// product , vendor -shop , order, user , view - recent-products, follow-shop, blacklist 